// Code generated by go-mockgen 1.3.5; DO NOT EDIT.

package workerbase

import (
	"context"
	"sync"
)

// MockWorkerSpecFinalizer is a mock implementation of the
// workerSpecFinalizer interface (from the package
// github.com/go-nacelle/workerbase) used for unit testing.
type MockWorkerSpecFinalizer struct {
	// FinalizeFunc is an instance of a mock function object controlling the
	// behavior of the method Finalize.
	FinalizeFunc *WorkerSpecFinalizerFinalizeFunc
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *WorkerSpecFinalizerInitFunc
	// TickFunc is an instance of a mock function object controlling the
	// behavior of the method Tick.
	TickFunc *WorkerSpecFinalizerTickFunc
}

// NewMockWorkerSpecFinalizer creates a new mock of the workerSpecFinalizer
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockWorkerSpecFinalizer() *MockWorkerSpecFinalizer {
	return &MockWorkerSpecFinalizer{
		FinalizeFunc: &WorkerSpecFinalizerFinalizeFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		InitFunc: &WorkerSpecFinalizerInitFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		TickFunc: &WorkerSpecFinalizerTickFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockWorkerSpecFinalizer creates a new mock of the
// workerSpecFinalizer interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockWorkerSpecFinalizer() *MockWorkerSpecFinalizer {
	return &MockWorkerSpecFinalizer{
		FinalizeFunc: &WorkerSpecFinalizerFinalizeFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockWorkerSpecFinalizer.Finalize")
			},
		},
		InitFunc: &WorkerSpecFinalizerInitFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockWorkerSpecFinalizer.Init")
			},
		},
		TickFunc: &WorkerSpecFinalizerTickFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockWorkerSpecFinalizer.Tick")
			},
		},
	}
}

// surrogateMockWorkerSpecFinalizer is a copy of the workerSpecFinalizer
// interface (from the package github.com/go-nacelle/workerbase). It is
// redefined here as it is unexported in the source package.
type surrogateMockWorkerSpecFinalizer interface {
	Finalize(context.Context) error
	Init(context.Context) error
	Tick(context.Context) error
}

// NewMockWorkerSpecFinalizerFrom creates a new mock of the
// MockWorkerSpecFinalizer interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockWorkerSpecFinalizerFrom(i surrogateMockWorkerSpecFinalizer) *MockWorkerSpecFinalizer {
	return &MockWorkerSpecFinalizer{
		FinalizeFunc: &WorkerSpecFinalizerFinalizeFunc{
			defaultHook: i.Finalize,
		},
		InitFunc: &WorkerSpecFinalizerInitFunc{
			defaultHook: i.Init,
		},
		TickFunc: &WorkerSpecFinalizerTickFunc{
			defaultHook: i.Tick,
		},
	}
}

// WorkerSpecFinalizerFinalizeFunc describes the behavior when the Finalize
// method of the parent MockWorkerSpecFinalizer instance is invoked.
type WorkerSpecFinalizerFinalizeFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []WorkerSpecFinalizerFinalizeFuncCall
	mutex       sync.Mutex
}

// Finalize delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerSpecFinalizer) Finalize(v0 context.Context) error {
	r0 := m.FinalizeFunc.nextHook()(v0)
	m.FinalizeFunc.appendCall(WorkerSpecFinalizerFinalizeFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Finalize method of
// the parent MockWorkerSpecFinalizer instance is invoked and the hook queue
// is empty.
func (f *WorkerSpecFinalizerFinalizeFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Finalize method of the parent MockWorkerSpecFinalizer instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *WorkerSpecFinalizerFinalizeFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerSpecFinalizerFinalizeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerSpecFinalizerFinalizeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *WorkerSpecFinalizerFinalizeFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerSpecFinalizerFinalizeFunc) appendCall(r0 WorkerSpecFinalizerFinalizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerSpecFinalizerFinalizeFuncCall objects
// describing the invocations of this function.
func (f *WorkerSpecFinalizerFinalizeFunc) History() []WorkerSpecFinalizerFinalizeFuncCall {
	f.mutex.Lock()
	history := make([]WorkerSpecFinalizerFinalizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerSpecFinalizerFinalizeFuncCall is an object that describes an
// invocation of method Finalize on an instance of MockWorkerSpecFinalizer.
type WorkerSpecFinalizerFinalizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerSpecFinalizerFinalizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerSpecFinalizerFinalizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerSpecFinalizerInitFunc describes the behavior when the Init method
// of the parent MockWorkerSpecFinalizer instance is invoked.
type WorkerSpecFinalizerInitFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []WorkerSpecFinalizerInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerSpecFinalizer) Init(v0 context.Context) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(WorkerSpecFinalizerInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockWorkerSpecFinalizer instance is invoked and the hook queue is
// empty.
func (f *WorkerSpecFinalizerInitFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockWorkerSpecFinalizer instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerSpecFinalizerInitFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerSpecFinalizerInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerSpecFinalizerInitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *WorkerSpecFinalizerInitFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerSpecFinalizerInitFunc) appendCall(r0 WorkerSpecFinalizerInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerSpecFinalizerInitFuncCall objects
// describing the invocations of this function.
func (f *WorkerSpecFinalizerInitFunc) History() []WorkerSpecFinalizerInitFuncCall {
	f.mutex.Lock()
	history := make([]WorkerSpecFinalizerInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerSpecFinalizerInitFuncCall is an object that describes an invocation
// of method Init on an instance of MockWorkerSpecFinalizer.
type WorkerSpecFinalizerInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerSpecFinalizerInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerSpecFinalizerInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerSpecFinalizerTickFunc describes the behavior when the Tick method
// of the parent MockWorkerSpecFinalizer instance is invoked.
type WorkerSpecFinalizerTickFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []WorkerSpecFinalizerTickFuncCall
	mutex       sync.Mutex
}

// Tick delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerSpecFinalizer) Tick(v0 context.Context) error {
	r0 := m.TickFunc.nextHook()(v0)
	m.TickFunc.appendCall(WorkerSpecFinalizerTickFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Tick method of the
// parent MockWorkerSpecFinalizer instance is invoked and the hook queue is
// empty.
func (f *WorkerSpecFinalizerTickFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Tick method of the parent MockWorkerSpecFinalizer instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerSpecFinalizerTickFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerSpecFinalizerTickFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerSpecFinalizerTickFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *WorkerSpecFinalizerTickFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerSpecFinalizerTickFunc) appendCall(r0 WorkerSpecFinalizerTickFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerSpecFinalizerTickFuncCall objects
// describing the invocations of this function.
func (f *WorkerSpecFinalizerTickFunc) History() []WorkerSpecFinalizerTickFuncCall {
	f.mutex.Lock()
	history := make([]WorkerSpecFinalizerTickFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerSpecFinalizerTickFuncCall is an object that describes an invocation
// of method Tick on an instance of MockWorkerSpecFinalizer.
type WorkerSpecFinalizerTickFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerSpecFinalizerTickFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerSpecFinalizerTickFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
