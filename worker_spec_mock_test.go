// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.
// This file was generated by robots at
// 2019-06-20T19:16:18-05:00
// using the command
// $ go-mockgen -f github.com/go-nacelle/workerbase -i WorkerSpec -o worker_spec_mock_test.go

package workerbase

import (
	"context"
	config "github.com/go-nacelle/config"
	"sync"
)

// MockWorkerSpec is a mock implementation of the WorkerSpec interface (from
// the package github.com/go-nacelle/workerbase) used for unit testing.
type MockWorkerSpec struct {
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *WorkerSpecInitFunc
	// TickFunc is an instance of a mock function object controlling the
	// behavior of the method Tick.
	TickFunc *WorkerSpecTickFunc
}

// NewMockWorkerSpec creates a new mock of the WorkerSpec interface. All
// methods return zero values for all results, unless overwritten.
func NewMockWorkerSpec() *MockWorkerSpec {
	return &MockWorkerSpec{
		InitFunc: &WorkerSpecInitFunc{
			defaultHook: func(config.Config, *Worker) error {
				return nil
			},
		},
		TickFunc: &WorkerSpecTickFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
	}
}

// NewMockWorkerSpecFrom creates a new mock of the MockWorkerSpec interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockWorkerSpecFrom(i WorkerSpec) *MockWorkerSpec {
	return &MockWorkerSpec{
		InitFunc: &WorkerSpecInitFunc{
			defaultHook: i.Init,
		},
		TickFunc: &WorkerSpecTickFunc{
			defaultHook: i.Tick,
		},
	}
}

// WorkerSpecInitFunc describes the behavior when the Init method of the
// parent MockWorkerSpec instance is invoked.
type WorkerSpecInitFunc struct {
	defaultHook func(config.Config, *Worker) error
	hooks       []func(config.Config, *Worker) error
	history     []WorkerSpecInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerSpec) Init(v0 config.Config, v1 *Worker) error {
	r0 := m.InitFunc.nextHook()(v0, v1)
	m.InitFunc.appendCall(WorkerSpecInitFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockWorkerSpec instance is invoked and the hook queue is empty.
func (f *WorkerSpecInitFunc) SetDefaultHook(hook func(config.Config, *Worker) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockWorkerSpec instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *WorkerSpecInitFunc) PushHook(hook func(config.Config, *Worker) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WorkerSpecInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(config.Config, *Worker) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WorkerSpecInitFunc) PushReturn(r0 error) {
	f.PushHook(func(config.Config, *Worker) error {
		return r0
	})
}

func (f *WorkerSpecInitFunc) nextHook() func(config.Config, *Worker) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerSpecInitFunc) appendCall(r0 WorkerSpecInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerSpecInitFuncCall objects describing
// the invocations of this function.
func (f *WorkerSpecInitFunc) History() []WorkerSpecInitFuncCall {
	f.mutex.Lock()
	history := make([]WorkerSpecInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerSpecInitFuncCall is an object that describes an invocation of
// method Init on an instance of MockWorkerSpec.
type WorkerSpecInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 config.Config
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Worker
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerSpecInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerSpecInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerSpecTickFunc describes the behavior when the Tick method of the
// parent MockWorkerSpec instance is invoked.
type WorkerSpecTickFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []WorkerSpecTickFuncCall
	mutex       sync.Mutex
}

// Tick delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerSpec) Tick(v0 context.Context) error {
	r0 := m.TickFunc.nextHook()(v0)
	m.TickFunc.appendCall(WorkerSpecTickFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Tick method of the
// parent MockWorkerSpec instance is invoked and the hook queue is empty.
func (f *WorkerSpecTickFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Tick method of the parent MockWorkerSpec instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *WorkerSpecTickFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WorkerSpecTickFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WorkerSpecTickFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *WorkerSpecTickFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerSpecTickFunc) appendCall(r0 WorkerSpecTickFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerSpecTickFuncCall objects describing
// the invocations of this function.
func (f *WorkerSpecTickFunc) History() []WorkerSpecTickFuncCall {
	f.mutex.Lock()
	history := make([]WorkerSpecTickFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerSpecTickFuncCall is an object that describes an invocation of
// method Tick on an instance of MockWorkerSpec.
type WorkerSpecTickFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerSpecTickFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerSpecTickFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
